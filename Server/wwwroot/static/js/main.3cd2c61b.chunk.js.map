{"version":3,"sources":["data/index.ts","components/GenericDrawer.tsx","components/style/shared.tsx","components/Label.tsx","components/DataFolderListItem.tsx","containers/DataFoldersContainer.tsx","containers/DataMappingsContainer.tsx","data/httpCommon.ts","components/MappingTable.tsx","components/FileUpload.tsx","components/DataImportDialog.tsx","components/DataDeleteDialog.tsx","App.tsx","index.tsx"],"names":["RooToolArea","useStyles","makeStyles","theme","drawer","props","margin","marginLeft","minWidth","width","maxWidth","paper","GenericDrawer","open","title","children","handleClose","classes","vert","w","h","position","fontSize","fontWeight","color","transform","height","left","top","verticalHeader","Drawer","anchor","onClose","role","className","style","useStyle","badge","display","palette","type","backgroundColor","borderRadius","paddingLeft","spacing","paddingRight","marginRight","badgeContainer","padding","badgeLeft","borderTopLeftRadius","borderBottomLeftRadius","badgeRight","borderTopRightRadius","borderBottomRightRadius","Label","text","bytesToHumanReadable","bytes","K","M","toFixed","G","T","DataFolderListItem","folder","handleDelete","handleSelect","selected","hideActions","ListItem","onClick","ListItemAvatar","Avatar","ListItemText","primary","name","secondary","size","moment","createdOn","fromNow","ListItemSecondaryAction","IconButton","edge","DataFoldersContainer","dataFolders","React","useState","undefined","selectedDataFolder","setSelectedDataFolder","length","Typography","variant","List","dense","map","DataMappingsContainer","dataMaps","handleEdit","id","ColumnType","RooToolAreas","unknown","aesAerialPhotos","ColumnTypes","string","commaSeparatedString","integer","decimal","date","axios","create","baseURL","headers","MappingTable","data","handleUpdate","rows","setRows","useEffect","SelectEdit","value","api","field","options","Select","fullWidth","labelId","onChange","event","newRows","target","setCellMode","Object","keys","key","MenuItem","columns","headerName","flex","editable","renderCell","params","renderEditCell","flexGrow","density","autoHeight","pageSize","BorderLinearProgress","withStyles","root","colorPrimary","bar","LinearProgress","FileUpload","handleDataImported","endpoint","progress","setProgress","uploading","setUploading","selectedFile","setSelectedFile","message","setMessage","Box","alignItems","mr","htmlFor","accept","files","handleSelectFile","Button","component","Grid","container","alignContent","item","file","formData","FormData","append","http","post","onUploadProgress","Math","round","loaded","total","then","result","catch","err","finally","handleUploadFile","DataImportDialog","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","DataDeleteDialog","handleDataDeleted","deleteDataFolderFromShare","a","delete","btoa","Alert","severity","AlertTitle","autoFocus","grow","breakpoints","up","handleSampleDataImport","newData","names","lines","forEach","index","examples","i","push","entry","columnName","exampleContent","mapTo","App","showDataFolders","setShowDataFolders","showMappings","setShowMappings","dataFolder","setDataFolder","setDataMaps","setDataFolders","currentMap","setCurrentMap","importDataDialogVisible","setImportDataDialogVisible","deleteDataFolder","setDeleteDataFolder","getDataMaps","get","status","maps","m","JSON","parse","saveDataMap","stringify","deleteDataMap","loadDataFoldersFromShare","importSampleData","uuid","toISOString","AppBar","Toolbar","noWrap","Tooltip","disabled","marginBottom","TextField","label","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cd2c61b.chunk.js","sourcesContent":["import { Dictionary } from 'models'\r\n\r\nexport enum RooToolArea {\r\n  unknown = '',\r\n  aesAerialPhotos = 'aes_aerial_photos',\r\n}\r\nexport const RooToolAreas: Dictionary<string> = {\r\n  [RooToolArea.unknown]: 'Unknown',\r\n  [RooToolArea.aesAerialPhotos]: 'AES Aerial Photos',\r\n}\r\n\r\nexport interface DataFolder {\r\n  name: string\r\n  createdOn: Date\r\n  size: number\r\n}\r\n\r\n\r\nexport enum ColumnType {\r\n  unknown = 'unknown',\r\n  string = 'string',\r\n  commaSeparatedString = 'comma_separated_string',\r\n  integer = 'integer',\r\n  decimal = 'decimal',\r\n  date = 'date',\r\n}\r\nexport const ColumnTypes: Dictionary<string> = {\r\n  [ColumnType.unknown]: 'Unknown',\r\n  [ColumnType.string]: 'Text data',\r\n  [ColumnType.commaSeparatedString]: 'Comma separated string data',\r\n  [ColumnType.integer]: 'Numeric data (non floating point)',\r\n  [ColumnType.decimal]: 'Numeric data (floating point)',\r\n  [ColumnType.date]: 'Date Expression in standard format'\r\n}\r\n","import Drawer from '@material-ui/core/Drawer'\r\nimport { verticalHeader } from 'components/style/shared'\r\nimport React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: (props: any) => ({\r\n    margin: 20,\r\n    marginLeft: 40,\r\n    '@media (min-width: 600px)': {\r\n      minWidth: props.width || 300,\r\n      maxWidth: props.width || 500,\r\n    },\r\n  }),\r\n  paper: {\r\n    '@media (max-width: 600px)': {\r\n      width: '100%',\r\n    },\r\n  },\r\n}))\r\n\r\ninterface Props {\r\n  open: boolean\r\n  title: string\r\n  width?: number\r\n  handleClose?: () => void\r\n}\r\nconst GenericDrawer: React.FC<Props> = ({ open, title, children, width, handleClose }) => {\r\n  const classes = useStyles({ width })\r\n  const vert = verticalHeader(300)\r\n  return (\r\n    <>\r\n      <Drawer classes={{ paper: classes.paper }} anchor=\"right\" open={open} onClose={() => handleClose && handleClose()}>\r\n        <div role=\"presentation\" className={classes.drawer}>\r\n          <div style={vert}>\r\n            {title}\r\n          </div>\r\n          {children}\r\n        </div>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GenericDrawer\r\n","export const verticalHeader = (w=200, h=30) => ({\r\n    position: \"absolute\",\r\n    fontSize: 20,\r\n    fontWeight: 600,\r\n    color: '#bbbbbb',\r\n    transform: 'rotate(90deg)',\r\n    width: w,\r\n    height: h,\r\n    left: (w-h)/-2,\r\n    top: w/2,\r\n  }) as React.CSSProperties;","import { makeStyles, Theme } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\ninterface Props {\r\n  title?: string\r\n  text: string\r\n  color: string\r\n}\r\ninterface StyleProps {\r\n  color: string\r\n}\r\nconst useStyle = makeStyles<Theme, StyleProps>((theme) => ({\r\n  badge: (props) => ({\r\n    display: 'inline-block',\r\n    color: theme.palette.type === 'dark' ? props.color : 'black',\r\n    backgroundColor: theme.palette.type === 'dark' ? '#222' : props.color,\r\n    borderRadius: 5,\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    fontSize: '80%',\r\n  }),\r\n  badgeContainer: (props) => ({\r\n    display: 'inline-block',\r\n    padding: 0,\r\n    marginLeft: 0,\r\n    marginRight: theme.spacing(1),\r\n    fontSize: '80%',\r\n  }),\r\n  badgeLeft: (props) => ({\r\n    display: 'inline-block',\r\n    color: theme.palette.type === 'dark' ? props.color : 'black',\r\n    backgroundColor: theme.palette.type === 'dark' ? '#222' : props.color,\r\n    borderTopLeftRadius : 5,\r\n    borderBottomLeftRadius: 5,\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n  }),\r\n  badgeRight: (props) => ({\r\n    display: 'inline-block',\r\n    color: theme.palette.type === 'dark' ? '#f0f0f0' : '#444444',\r\n    backgroundColor: theme.palette.type === 'dark' ? '#444444' : '#f0f0f0',\r\n    borderTopRightRadius : 5,\r\n    borderBottomRightRadius: 5,\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginLeft: 0,\r\n  }),\r\n}))\r\n\r\nconst Label: React.FC<Props> = ({ title, text, color }) => {\r\n  const classes = useStyle({ color })\r\n  return (\r\n    <>\r\n      {title && (\r\n        <div className={classes.badgeContainer}>\r\n          <div className={classes.badgeLeft}>{title}</div>\r\n          <div className={classes.badgeRight}>{text}</div>\r\n        </div>\r\n      )}\r\n      {!title && <div className={classes.badge}>{text}</div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Label\r\n","import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core'\r\nimport moment from 'moment'\r\nimport React from 'react'\r\nimport Label from 'components/Label'\r\nimport FolderIcon from '@material-ui/icons/Folder'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { DataFolder } from 'data'\r\n\r\nconst bytesToHumanReadable = (bytes: number) => {\r\n  const K = 1024\r\n  if (bytes < K) return `${bytes} B`\r\n  const M = K * 1024\r\n  if (bytes < M) return `${(bytes / K).toFixed(2)} KB`\r\n  const G = M * 1024\r\n  if (bytes < G) return `${(bytes / M).toFixed(2)} MB`\r\n  const T = G * 1024\r\n  if (bytes < T) return `${(bytes / T).toFixed(2)} GB`\r\n  return `< 1 TB`\r\n}\r\n\r\ninterface Props {\r\n  folder: DataFolder\r\n  selected?: boolean\r\n  hideActions?: boolean\r\n  handleSelect?: (folder: DataFolder) => void\r\n  handleDelete?: (folder: DataFolder) => void\r\n}\r\nconst DataFolderListItem: React.FC<Props> = ({ folder, handleDelete, handleSelect, selected=false, hideActions = false }) => {\r\n  return (\r\n    <ListItem selected={selected} onClick={() => handleSelect?.(folder)}>\r\n      <ListItemAvatar>\r\n        <Avatar>\r\n          <FolderIcon />\r\n        </Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={folder.name}\r\n        secondary={\r\n          <>\r\n            <Label color=\"lightblue\" title=\"size\" text={bytesToHumanReadable(folder.size)} />\r\n            <Label color=\"lightgreen\" title=\"created\" text={moment(folder.createdOn).fromNow()} />\r\n          </>\r\n        }\r\n      />\r\n      {!hideActions && (\r\n        <ListItemSecondaryAction>\r\n          <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDelete?.(folder)}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      )}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default DataFolderListItem","import { List, Typography } from '@material-ui/core'\r\nimport DataFolderListItem from 'components/DataFolderListItem'\r\nimport { DataFolder } from 'data'\r\nimport React from 'react'\r\n\r\ninterface Props {\r\n  dataFolders: DataFolder[]\r\n  handleSelect?: (folder: DataFolder | undefined) => void\r\n  handleDelete?: (folder: DataFolder) => void\r\n}\r\nconst DataFoldersContainer: React.FC<Props> = ({ dataFolders, handleSelect, handleDelete }) => {\r\n  const [selectedDataFolder, setSelectedDataFolder] = React.useState<DataFolder | undefined>(undefined)\r\n\r\n  return (\r\n    <>\r\n      {dataFolders.length === 0 && <Typography variant=\"body1\">No Data Folders</Typography>}\r\n      {dataFolders.length > 0 && (\r\n        <List dense>\r\n          {dataFolders.map((folder) => (\r\n            <DataFolderListItem\r\n              selected={folder === selectedDataFolder}\r\n              folder={folder}\r\n              handleSelect={(folder) => {\r\n                if (folder === selectedDataFolder) {\r\n                  setSelectedDataFolder(undefined)\r\n                  handleSelect?.(undefined)\r\n                } else {\r\n                  setSelectedDataFolder(folder)\r\n                  handleSelect?.(folder)\r\n                }\r\n              }}\r\n              handleDelete={(folder) => handleDelete?.(folder)}\r\n            />\r\n          ))}\r\n        </List>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DataFoldersContainer\r\n","import { Avatar, IconButton, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText } from '@material-ui/core'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport FolderIcon from '@material-ui/icons/Folder'\r\nimport Label from 'components/Label'\r\nimport { DataMap } from 'models'\r\nimport React from 'react'\r\n\r\n\r\ninterface Props {\r\n  dataMaps: DataMap[]\r\n  handleEdit?: (map: DataMap) => void\r\n}\r\nconst DataMappingsContainer: React.FC<Props> = ({ dataMaps, handleEdit }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <List dense>\r\n          {dataMaps.map((map: DataMap) => (\r\n            <ListItem>\r\n              <ListItemAvatar>\r\n                <Avatar>\r\n                  <FolderIcon />\r\n                </Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={map.name}\r\n                secondary={\r\n                  <>\r\n                    <Label color=\"lightblue\" title=\"size\" text={map.id} />\r\n                  </>\r\n                }\r\n              />\r\n                <ListItemSecondaryAction>\r\n                  <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => handleEdit?.(map)}>\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DataMappingsContainer\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://localhost:44399/api/v1',\r\n  headers: {\r\n    'Content-type': 'application/json',\r\n  },\r\n})\r\n","import { MenuItem, Select, Typography } from '@material-ui/core'\r\nimport { DataGrid, GridCellParams, GridColumns, GridRowData } from '@material-ui/data-grid'\r\nimport { ColumnTypes, RooToolAreas } from 'data'\r\nimport { Dictionary, MappingData } from 'models'\r\nimport React from 'react'\r\n\r\n\r\ninterface Props {\r\n  data: MappingData[]\r\n  handleUpdate?: (data: MappingData[]) => void\r\n}\r\nconst MappingTable: React.FC<Props> = ({ data, handleUpdate }) => {\r\n  const [rows, setRows] = React.useState<GridRowData[]>([])\r\n\r\n  React.useEffect(() => {\r\n    setRows(data as GridRowData[])\r\n  }, [data])\r\n\r\n  interface SelectEditProps {\r\n    options: Dictionary<string>\r\n  }\r\n\r\n  const SelectEdit: React.FC<GridCellParams & SelectEditProps> = (props) => {\r\n    const { id, value, api, field, options } = props\r\n    const handleChange = (event: any) => {\r\n      let newRows:GridRowData[] = [ ...rows ]\r\n      newRows[id as number] = { ...newRows[id as number], [field]: event.target.value }\r\n      setRows(newRows)\r\n      handleUpdate?.(newRows as MappingData[])\r\n      api.setCellMode(id, field, 'view')\r\n    }\r\n    return (\r\n      <Select fullWidth labelId=\"map-entry-type-label\" id=\"map-entry-type\" value={value} onChange={handleChange}>\r\n        {Object.keys(options).map((key) => (\r\n          <MenuItem key={key} value={key}>\r\n            {options[key]}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    )\r\n  }\r\n  \r\n  const renderTypeSelectCell = (params: GridCellParams) => {\r\n    return <SelectEdit options={ColumnTypes} {...params} />\r\n  }\r\n  \r\n  const renderMapToSelectCell = (params: GridCellParams) => {\r\n    return <SelectEdit options={RooToolAreas} {...params} />\r\n  }\r\n  \r\n  const renderTypeCell = (params: GridCellParams) => {\r\n    return ColumnTypes[params.value as string] ?? ''\r\n  }\r\n  \r\n  const renderMapToCell = (params: GridCellParams) => {\r\n    return RooToolAreas[params.value as string] ?? ''\r\n  }\r\n  \r\n  const renderExampleContent = (params: GridCellParams) => {\r\n    var values = params.value as object[]\r\n    return values[0]\r\n  }\r\n\r\n  const columns: GridColumns = [\r\n    { field: 'id', headerName: 'Column Offset', width: 50 },\r\n    { field: 'columnName', headerName: 'Column name', flex: 1 },\r\n    { field: 'type', headerName: 'Data Type', editable: true, flex: 1, renderCell: renderTypeCell, renderEditCell: renderTypeSelectCell },\r\n    { field: 'mapTo', headerName: 'Map To Location', editable: true, flex: 1, renderCell: renderMapToCell, renderEditCell: renderMapToSelectCell },\r\n    { field: 'exampleContent', headerName: 'Example Data', editable: false, flex: 1, renderCell: renderExampleContent }\r\n  ]\r\n\r\n  if (data.length === 0) {\r\n    return <Typography variant=\"caption\">No mapping data</Typography>\r\n  }\r\n  return (\r\n    <div style={{ display: 'flex', height: '100%' }}>\r\n      <div style={{ flexGrow: 1 }}>\r\n        <DataGrid density=\"compact\" autoHeight pageSize={15} rows={rows} columns={columns} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MappingTable\r\n","import React from 'react'\r\nimport { Box, Button, Grid, IconButton, LinearProgress, Typography, withStyles } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport http from 'data/httpCommon'\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: '#EEEEEE',\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress)\r\n\r\ninterface Props {\r\n  handleDataImported: (data: any) => any\r\n  endpoint?: string\r\n}\r\nconst FileUpload: React.FC<Props> = ({ handleDataImported, endpoint = '/data/upload' }) => {\r\n  const [progress, setProgress] = React.useState(0)\r\n  const [uploading, setUploading] = React.useState(false)\r\n  const [selectedFile, setSelectedFile] = React.useState<File | undefined>(undefined)\r\n  const [message, setMessage] = React.useState<string | undefined>(undefined)\r\n\r\n  const handleSelectFile = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!event.target.files) {\r\n      return\r\n    }\r\n    if (event.target.files.length === 0) {\r\n      return\r\n    }\r\n    setSelectedFile(event.target.files[0])\r\n  }\r\n\r\n  const handleRemoveFile = () => {\r\n    setSelectedFile(undefined)\r\n  }\r\n\r\n  const handleUploadFile = (file: File) => {\r\n    setUploading(true)\r\n    let formData = new FormData()\r\n    formData.append('file', file)\r\n    http\r\n      .post(endpoint, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (event) => {\r\n          setProgress(Math.round((100 * event.loaded) / event.total))\r\n        },\r\n      })\r\n      .then((result) => {\r\n        setMessage('file upload complete')\r\n        handleDataImported(result.data)\r\n      })\r\n      .catch((err: Error) => {\r\n        setMessage(err.message)\r\n      })\r\n      .finally(() => {\r\n        setSelectedFile(undefined)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {selectedFile && uploading && (\r\n        <Box className=\"mb25\" display=\"flex\" alignItems=\"center\">\r\n          <Box width=\"100%\" mr={1}>\r\n            <BorderLinearProgress variant=\"determinate\" value={progress} />\r\n          </Box>\r\n          <Box minWidth={35}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">{`${progress}%`}</Typography>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n      {!selectedFile && !uploading && (\r\n        <label htmlFor=\"btn-upload\">\r\n          <input id=\"btn-upload\" name=\"btn-upload\" style={{ display: 'none' }} type=\"file\" accept=\".zip\" onChange={(event) => handleSelectFile(event)} />\r\n          <Button className=\"btn-choose\" variant=\"outlined\" component=\"span\">\r\n            Choose Zip File\r\n          </Button>\r\n        </label>\r\n      )}\r\n      {selectedFile && !uploading && (\r\n        <Grid container alignContent=\"center\">\r\n          <Grid item>\r\n            {selectedFile.name}\r\n            <IconButton aria-label=\"delete\" onClick={() => handleRemoveFile()}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button className=\"btn-upload\" color=\"primary\" variant=\"contained\" component=\"span\" onClick={() => handleUploadFile(selectedFile)}>\r\n              Upload\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {message && <div>{message}</div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FileUpload\r\n","import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport FileUpload from './FileUpload'\r\n\r\ninterface Props {\r\n  open: boolean\r\n  message: string\r\n  handleClose?: () => void\r\n  handleDataImported?: (data: any) => void\r\n  endpoint: string\r\n}\r\nconst DataImportDialog: React.FC<Props> = ({ open, message, handleClose, handleDataImported, endpoint }) => {\r\n  return (\r\n    <Dialog open={open} onClose={() => handleClose?.()} aria-labelledby=\"form-dialog-title\">\r\n      <DialogTitle id=\"form-dialog-title\">Data Import</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>{message}</DialogContentText>\r\n        <FileUpload endpoint={endpoint} handleDataImported={(data) => handleDataImported?.(data)} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => handleClose?.()} color=\"secondary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default DataImportDialog\r\n","import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\r\nimport { Alert, AlertTitle } from '@material-ui/lab'\r\nimport { DataFolder } from 'data'\r\nimport React from 'react'\r\nimport http from 'data/httpCommon'\r\nimport DataFolderListItem from './DataFolderListItem'\r\n\r\ninterface Props {\r\n  folder?: DataFolder\r\n  message: string\r\n  handleClose: () => void\r\n  handleDataDeleted: () => void\r\n  endpoint: string\r\n}\r\nconst DataDeleteDialog: React.FC<Props> = ({ folder, message, handleClose, handleDataDeleted, endpoint }) => {\r\n  const deleteDataFolderFromShare = async (name: string) => {\r\n    await http.delete(`${endpoint}/${btoa(name)}`)\r\n    handleDataDeleted()\r\n  }\r\n  return (\r\n    <Dialog open={folder !== undefined} onClose={() => handleClose()} aria-labelledby=\"delete-data-folder\" aria-describedby=\"Delete a data folder\">\r\n    <DialogTitle id=\"delete-data-folder\">Delete Data</DialogTitle>\r\n    <DialogContent>\r\n      <DialogContentText id=\"alert-dialog-description\">\r\n        <Alert severity=\"warning\">\r\n          <AlertTitle>Warning</AlertTitle>\r\n          {message}\r\n        </Alert>\r\n        {folder && (\r\n          <DataFolderListItem folder={folder} hideActions />\r\n        )}\r\n      </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <Button onClick={() => folder && deleteDataFolderFromShare(folder?.name)} color=\"secondary\">\r\n        Delete\r\n      </Button>\r\n      <Button onClick={() => handleClose()} color=\"primary\" autoFocus>\r\n        Keep\r\n      </Button>\r\n    </DialogActions>\r\n  </Dialog>\r\n  )\r\n}\r\n\r\nexport default DataDeleteDialog","import { AppBar, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, makeStyles, Toolbar, Tooltip, Typography, Box, TextField, Button } from '@material-ui/core'\nimport AccountTreeIcon from '@material-ui/icons/AccountTree'\nimport FolderIcon from '@material-ui/icons/Folder'\nimport GenericDrawer from 'components/GenericDrawer'\nimport DataFoldersContainer from 'containers/DataFoldersContainer'\nimport DataMappingsContainer from 'containers/DataMappingsContainer'\nimport { ColumnType, DataFolder, RooToolArea } from 'data'\nimport React from 'react'\nimport http from 'data/httpCommon'\nimport moment from 'moment'\nimport { v4 as uuid } from 'uuid'\nimport './App.css'\nimport { DataMap, MappingData } from 'models'\nimport MappingTable from 'components/MappingTable'\nimport DataImportDialog from 'components/DataImportDialog'\nimport DataDeleteDialog from 'components/DataDeleteDialog'\n\nconst useStyle = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n}))\n\nconst handleSampleDataImport = (result: { data: string[][] }, overwrite: boolean = false) => {\n  const newData: MappingData[] = []\n  const names = result.data[0]\n  const lines = result.data.length\n  names.forEach((name, index) => {\n    const examples: string[] = []\n    for (var i = 1; i < lines; i++) {\n      examples.push(result.data[1][index])\n    }\n    let entry = newData[index]\n    if (!entry || (entry && entry.columnName !== name)) {\n      newData[index] = {\n        id: index,\n        type: ColumnType.string,\n        columnName: name,\n        exampleContent: examples,\n        mapTo: RooToolArea.unknown,\n      }\n    }\n  })\n  return newData\n}\n\nconst App: React.FC = () => {\n  const [showDataFolders, setShowDataFolders] = React.useState(false)\n  const [showMappings, setShowMappings] = React.useState(false)\n  const [dataFolder, setDataFolder] = React.useState<DataFolder | undefined>(undefined)\n  const [dataMaps, setDataMaps] = React.useState<DataMap[]>([])\n  const [dataFolders, setDataFolders] = React.useState<DataFolder[]>([])\n  const [currentMap, setCurrentMap] = React.useState<DataMap | undefined>(undefined)\n  const [importDataDialogVisible, setImportDataDialogVisible] = React.useState(false)\n  const [deleteDataFolder, setDeleteDataFolder] = React.useState<DataFolder | undefined>(undefined)\n\n  const getDataMaps = async () => {\n    var result = await http.get(`map/list`)\n    if (result.status === 200) {\n      const maps = result.data as { id: string; name: string; data: string }[]\n      setDataMaps(maps.map((m) => ({ ...m, data: JSON.parse(m.data) })))\n    }\n  }\n\n  const saveDataMap = async (map: DataMap) => {\n    var result = await http.post(`map/upsert`, { id: map.id, name: map.name, data: JSON.stringify(map.data) })\n    if (result.status === 200) {\n      getDataMaps()\n    }\n  }\n\n  const deleteDataMap = async (map: DataMap) => {\n    var result = await http.delete(`map/delete/${map.id}`)\n    if (result.status === 200) {\n      getDataMaps()\n    }\n  }\n\n  const loadDataFoldersFromShare = async () => {\n    const result = await http.get<DataFolder[]>('/data/list')\n    setDataFolders(result.data)\n  }\n\n  const importSampleData = async (folder: DataFolder) => {\n    var result = await http.post(`map/buildFromData/${btoa(folder.name)}`)\n    var data = handleSampleDataImport(result.data)\n    setCurrentMap({\n      id: uuid(),\n      name: `Generated Map ${moment().toISOString()}`,\n      data,\n    })\n  }\n\n  React.useEffect(() => {\n    loadDataFoldersFromShare()\n    getDataMaps()\n  }, [])\n\n  const classes = useStyle()\n  return (\n    <>\n      <div className={classes.grow}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              Data Conversion Utilities\n            </Typography>\n            <div className={classes.grow} />\n            <Tooltip title=\"Data Folders\">\n              <IconButton aria-label=\"data folders\" color=\"inherit\" onClick={() => setShowDataFolders(true)}>\n                <FolderIcon />\n              </IconButton>\n            </Tooltip>\n            <IconButton aria-label=\"data mappings\" color=\"inherit\" onClick={() => setShowMappings(true)}>\n              <Tooltip title=\"Mappings\">\n                <AccountTreeIcon />\n              </Tooltip>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n      </div>\n\n      <GenericDrawer\n        title=\"Data Folders\"\n        handleClose={() => {\n          setShowDataFolders(false)\n          setDataFolder(undefined)\n        }}\n        open={showDataFolders}\n      >\n        <Typography variant=\"h4\">Data Folders</Typography>\n        <DataFoldersContainer dataFolders={dataFolders} handleSelect={(folder) => setDataFolder(folder)} handleDelete={(folder) => setDeleteDataFolder(folder)} />\n        <Button disabled={dataFolder === undefined} onClick={() => dataFolder && importSampleData(dataFolder)}>\n          Generate Structure from Data\n        </Button>\n        <Button onClick={() => setImportDataDialogVisible(true)}>Upload Data</Button>\n      </GenericDrawer>\n\n      <GenericDrawer title=\"Data Mappings\" handleClose={() => setShowMappings(false)} open={showMappings}>\n        <Typography variant=\"h4\">Data Mappings</Typography>\n        <DataMappingsContainer dataMaps={dataMaps} handleEdit={(map) => setCurrentMap(map)} />\n      </GenericDrawer>\n\n      {currentMap && (\n        <Dialog fullWidth maxWidth=\"lg\" open={currentMap !== undefined} onClose={() => setCurrentMap(undefined)} aria-labelledby=\"max-width-dialog-title\">\n          <DialogTitle id=\"max-width-dialog-title\">Edit Mapping Data</DialogTitle>\n          <DialogContent>\n            <DialogContentText>Edit the data to map to the desired destinations.</DialogContentText>\n            <Box style={{ marginBottom: 10 }}>\n              <TextField fullWidth label=\"Map Name\" size=\"medium\" name=\"map-name\" value={currentMap.name} onChange={(e) => setCurrentMap({ ...currentMap, name: e.target.value })} />\n            </Box>\n            <MappingTable handleUpdate={(data) => setCurrentMap({ ...currentMap, data })} data={currentMap.data} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setCurrentMap(undefined)} color=\"secondary\">\n              Close\n            </Button>\n            <Button onClick={() => {\n              deleteDataMap(currentMap)\n              setCurrentMap(undefined)\n            }} color=\"secondary\">\n              Delete\n            </Button>\n            <Button\n              onClick={() => {\n                saveDataMap(currentMap)\n                setCurrentMap(undefined)\n              }}\n              color=\"primary\"\n            >\n              Save Data Mapping Configuration\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n\n      <DataImportDialog\n        message={`Upload must be a zip file. The root of the zip file should contain the data in a CSV (comma separated values) file. Any photos referenced in the CSV file should be in a folder called 'photos'`}\n        endpoint=\"/data/upload\"\n        handleDataImported={(data) => {\n          loadDataFoldersFromShare()\n          setImportDataDialogVisible(false)\n        }}\n        open={importDataDialogVisible}\n        handleClose={() => setImportDataDialogVisible(false)}\n      />\n\n      <DataDeleteDialog\n        message=\"This will permanently delete this data folder. Are you sure this is what you want?\"\n        endpoint=\"/data/delete\"\n        handleDataDeleted={() => {\n          loadDataFoldersFromShare()\n          setDeleteDataFolder(undefined)\n        }}\n        folder={deleteDataFolder}\n        handleClose={() => setDeleteDataFolder(undefined)}\n      />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals(console.log);\n"],"sourceRoot":""}